<?xml version="1.0" encoding="UTF-8"?>

<!-- Mybatis 홈페이지에서 복사 붙여넣기 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="user">
  
  	<!-- 회원가입 id중복체크 -->
  	<select id="idcheck" parameterType="userDTO" resultType="int">
  		select count(*) from users where id = #{id}
  	</select>
  	
  	<!-- 회원가입 닉네임 중복체크 -->
  	<select id="nicknamecheck" parameterType="userDTO" resultType="int">
  		select count(*) from users where nickname = #{nickname}
  	</select>
  
 	<!-- 회원가입 -->
	<insert id="userSignup" parameterType="userDTO">
		insert into users(id,pw,name,mobile,nickname,reg) values (#{id},#{pw},#{name},#{mobile},#{nickname},sysdate)
	</insert>
  
	<!-- 로그인 id,pw 체크 -->
	<select id="IdPwcheck" parameterType="userDTO" resultType="int">
		select count(*) from users where id = #{id}
		<if test="pw != null">
			and pw = #{pw}
		</if>
	</select>
	
	<!-- ////////////////////////////카카오 로그인////////////////////////////////// -->
	
	 <!-- 카카오 아이디 있는지 확인 -->
	<select id="kakaologincheck" parameterType="map" resultType="map">
		select * from users where id=#{email}
	</select>
  	
  	<!-- 카카오 커넥션 -->
  	<select id="KakaoupdateConnection" parameterType="map">
  		update users set kakaologin = #{id} where id=#{email}
  	</select>
  	
  	<!-- 카카오 로그인 -->
  	<select id="KakaoLoginPro" parameterType="map" resultType="hashmap">
  		select * from users where id=#{email} and kakaologin=#{id}
  	</select>
  
  	 <!--DB카카오 유저 정보 가져오기 -->
  	<select id="getkakao" parameterType="map" resultType="userDTO">
  		select * from users where id = #{ID}
  	</select>
  	
  	 <!--회원 1명 정보 가져오기 -->
  	<select id="getUser" parameterType="string" resultType="userDTO">
  		select * from users where id = #{value}
  	</select>
  	
  	  <!-- 유저 닉네임 중복 -->
	 <select id="UserNickNameCheck" parameterType="string" resultType="int">
	  	select count(*) from users where nickname=#{value}
	 </select>
  	
  	<!-- 정보 수정 -->
  	<update id="updateUser" parameterType="hashmap">
  		update users
  		<trim prefix="set" suffixOverrides="," suffix="where id=#{dto}">
  			<if test="mobile != null">
  				mobile = #{mobile},
  			</if>
  			<if test="nickname != null">
  				nickname = #{nickname},
  			</if>
  		</trim>
  	</update>
  	
  	<!-- 리뷰 id 수정 -->
  	<update id="reviewupdate" parameterType="hashmap">
  		update review set reviewid = #{nickname} where reviewid=#{dto}
  	</update>
  	
  
  <!-- 회원탈퇴 -->
  <delete id="userDeletepw" parameterType="userDTO">
	delete from users where id = #{id}
  </delete>
  
  <!-- 1:1문의삭제 -->
  <delete id="userQuestionDelete" parameterType="userDTO">
  	delete from mtm where mtmuserid = #{id}
  </delete>
  
  <!-- 1:1문의삭제 -->
  <delete id="userReviewDelete" parameterType="userDTO">
  	delete from review where reviewid = #{nickname}
  </delete>
  
  <!-- id찾기 -->
  <select id="findid" parameterType="userDTO" resultType="string">
  	select id from users  where name=#{name} and mobile =#{mobile}
  </select>
  
  
  <!-- pw찾기 -->
  <select id="findpw" parameterType="userDTO" resultType="string">
  	select pw from users where id=#{id} and name=#{name} and mobile=#{mobile}
  </select>
  
  <!-- pw수정 -->
  <update id="pwModify" parameterType="hashmap">
	update users set pw = #{pwModify} where id = #{userId}
  </update>
  
  <!-- 1:1 등록 -->
  <insert id="QuestionContent" parameterType="mtmDTO">
  	insert into mtm(mtmno,mtmuserid,mtmsubject,mtmcontent,reg) values(mtm_seq.nextval,#{mtmuserid},#{mtmsubject},#{mtmcontent},sysdate)
  </insert>

  <!-- 전체 게시글 수 가져오기 -->
  <select id="getArticleList" parameterType="userDTO" resultType="int">
  	select count(*) from mtm where mtmuserid = #{id}
  </select>
  
  <!--1:1문의 한페이지 글 목록 가져오기-->
  <select id="getArticles" parameterType="hashmap" resultType="mtmDTO">
	  <![CDATA[
			 select B.*,r from
			    (select A.*,rownum r from
			        (select * from mtm where mtmuserid = #{Id} order by reg desc) A
			    order by reg desc) B
			where r>=#{start} and r<=#{end}
	  ]]>
  </select>
  
  <!-- 1:1문의 글 가져오기 -->
  <select id="getmtm" parameterType="int" resultType="mtmDTO">
  	select * from mtm where mtmno=#{value}
  </select>
  
  <!-- 1:1문의 수정 -->
  <update id="QuestionSignup" parameterType="mtmDTO">
  	update mtm set mtmsubject=#{mtmsubject},mtmcontent=#{mtmcontent} where mtmno = #{mtmno}
  </update>
  
  <!-- 1:1문의 삭제 -->
  <delete id="QuestionDelete" parameterType="int">
  	delete from mtm where mtmno=#{value}
  </delete>
  
  <!-- ajax 닉네임 중복 -->
  <select id="ajaxnicknamecheck" parameterType="userDTO" resultType="int">
  	select count(*) from users where nickname=#{nickname}
  </select>
  
  <!-- 리뷰 글 개수 count -->
  <select id="userReviewListcount" parameterType="userDTO" resultType="int">
  	select count(*) from review where reviewid=#{nickname}
  </select>
  
  <!-- 리뷰 리스트 -->
  <select id="userReviewList" parameterType="hashmap" resultType="userreviewDTO">
  <![CDATA[
  		select B.*,r from
			(select A.*, rownum r from
	        	(select review.*,hospital.hosname from review,hospital where review.reviewhosno = hospital.hosno order by reviewdate desc) A
			where reviewid = #{nickname} order by reviewdate desc) B
		where r>= #{start} and r<=#{end}
  ]]>
  </select>

 <!-- 리뷰 목록 가져오기 -->
	<select id="userReview" parameterType="userDTO" resultType="reviewDTO">
		select * from review where reviewid = #{nickname}
	</select>
  
  <!-- 병원 revcount -->
  <update id="userReviewUpdate" parameterType="int">
  	update hospital set revcount = revcount-1 where hosno = #{value}
  </update>
  
  
  
  
  </mapper>